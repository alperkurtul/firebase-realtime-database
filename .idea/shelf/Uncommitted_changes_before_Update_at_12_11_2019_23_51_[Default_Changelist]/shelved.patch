Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.0.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <!-- **************************************************************  -->\n    <!-- Uploading requirements for the Maven Central Repository          -->\n    <!-- **************************************************************  -->\n    <groupId>com.github.alperkurtul</groupId>\n    <artifactId>spring-boot-starter-firebase-realtime-database</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <name>Managing with Firebase Realtime Database</name>\n    <description>This library is used for accessing to the Firebase Realtime Database.</description>\n    <url>https://github.com/alperkurtul/spring-boot-starter-firebase-realtime-database</url>\n\n    <licenses>\n        <license>\n            <name>MIT License</name>\n            <url>http://www.opensource.org/licenses/mit-license.php</url>\n        </license>\n    </licenses>\n\n    <developers>\n        <developer>\n            <name>Alper Kurtul</name>\n            <email>alperkurtul@gmail.com</email>\n            <organization>com.github.alperkurtul</organization>\n            <organizationUrl>https://www.github.com/alperkurtul/</organizationUrl>\n        </developer>\n    </developers>\n\n    <scm>\n        <connection>scm:git:git://github.com/alperkurtul/spring-boot-starter-firebase-realtime-database.git</connection>\n        <developerConnection>scm:git:ssh://github.com:alperkurtul/spring-boot-starter-firebase-realtime-database.git</developerConnection>\n        <url>https://github.com/alperkurtul/spring-boot-starter-firebase-realtime-database</url>\n    </scm>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>ossrh</id>\n            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n    <!-- **************************************************************  -->\n    <!-- **************************************************************  -->\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20190722</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <!-- **************************************************************  -->\n            <!-- Uploading requirements for the Maven Central Repository          -->\n            <!-- **************************************************************  -->\n            <plugin>\n                <groupId>org.sonatype.plugins</groupId>\n                <artifactId>nexus-staging-maven-plugin</artifactId>\n                <version>1.6.7</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <serverId>ossrh</serverId>\n                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                    <autoReleaseAfterClose>true</autoReleaseAfterClose>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.2.1</version>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>2.9.1</version>\n                <configuration>\n                    <javadocExecutable>${java.home}/../bin/javadoc</javadocExecutable>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>attach-javadocs</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-gpg-plugin</artifactId>\n                <version>1.5</version>\n                <executions>\n                    <execution>\n                        <id>sign-artifacts</id>\n                        <phase>verify</phase>\n                        <goals>\n                            <goal>sign</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <!-- **************************************************************  -->\n            <!-- **************************************************************  -->\n        </plugins>\n    </build>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 81158cb02cea0722ca88ed16d460ca385cea9a66)
+++ pom.xml	(date 1573499010476)
@@ -14,7 +14,7 @@
     <!-- **************************************************************  -->
     <groupId>com.github.alperkurtul</groupId>
     <artifactId>spring-boot-starter-firebase-realtime-database</artifactId>
-    <version>0.0.1-SNAPSHOT</version>
+    <version>1.0.2.RELEASE</version>
 
     <name>Managing with Firebase Realtime Database</name>
     <description>This library is used for accessing to the Firebase Realtime Database.</description>
@@ -80,6 +80,10 @@
 
     <build>
         <plugins>
+<!--            <plugin>-->
+<!--                <groupId>org.springframework.boot</groupId>-->
+<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
+<!--            </plugin>-->
             <!-- **************************************************************  -->
             <!-- Uploading requirements for the Maven Central Repository          -->
             <!-- **************************************************************  -->
Index: src/test/java/com/github/alperkurtul/firebaserealtimedatabase/repository/test/ProductRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.github.alperkurtul.firebaserealtimedatabase.repository.test;\n\nimport com.github.alperkurtul.firebaserealtimedatabase.bean.FirebaseSaveResponse;\nimport com.github.alperkurtul.firebaserealtimedatabase.configuration.FirebaseConfiguration;\nimport com.github.alperkurtul.firebaserealtimedatabase.configuration.FirebaseDbConfig;\nimport com.github.alperkurtul.firebaserealtimedatabase.exception.HttpNotFoundException;\nimport com.github.alperkurtul.firebaserealtimedatabase.repository.model.Product;\nimport com.github.alperkurtul.firebaserealtimedatabase.repository.model.ProductRepository;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.context.TestConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.math.BigDecimal;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.*;\n\n@SpringBootTest(classes = FirebaseConfiguration.class)\n@RunWith(SpringRunner.class)\n@Import(ProductRepositoryTest.RepositoryTestConfiguration.class)\n@EnableConfigurationProperties(FirebaseDbConfig.class)\npublic class ProductRepositoryTest {\n\n    private String userAuthKey = \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI1MDgxMWNkYzYwOWQ5MGY5ODE1MTE5MWIyYmM5YmQwY2ViOWMwMDQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vZmx1dHRlci1wcm9kdWN0cy1hYzIwMyIsImF1ZCI6ImZsdXR0ZXItcHJvZHVjdHMtYWMyMDMiLCJhdXRoX3RpbWUiOjE1NzM0MDIxMDQsInVzZXJfaWQiOiJJVHh5dXY5Q1lKaHA0SUVodnF2eFowYjZEQngyIiwic3ViIjoiSVR4eXV2OUNZSmhwNElFaHZxdnhaMGI2REJ4MiIsImlhdCI6MTU3MzQwMjEwNCwiZXhwIjoxNTczNDA1NzA0LCJlbWFpbCI6InRlc3Q3QHRlc3QuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbInRlc3Q3QHRlc3QuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.RgECG-b8Fb7tuZ2-RntJ-i2VZ2EOSP3G2SmYb3w2y9heV-6EiYmIju_f-eSLoxA-BQ0G5Uiuo8xVBIHTy_7lM40qdGzkOc4g88xRifKQ1uhAkq1g2Np_pYEKYN-AFNxMU0s4zDul0UL-eRQ4OFtZA3x93gvMyz_6gY2TS2hIlMpbg6ymYa52fAgrJicRW-4Q5y-mWaXQ432GlfnAhDGORQlLqHdOAsjEfgjnUz6BTtmcgpRSJUVIe8-DVKYsFLQCxThrmiDm09BL9Z1G-ogA9II8oAtv78SLAl5LLE2aH3gAQQ-fUzShEEEbC8Bnro8mByNwRhjeasVhiyWRfhw0oA\";\n    private String firebaseId = \"\";\n\n    @TestConfiguration\n    public static class RepositoryTestConfiguration {\n\n        @Bean\n        public RestTemplate restTemplate() {\n            return new RestTemplate();\n        }\n\n        @Bean\n        public ProductRepository productRepository() {\n            return new ProductRepository();\n        }\n\n    }\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    @Test\n    public void itShouldSaveReadUpdateDeleteAndSaveAgainWithSuccess() {\n\n        Product product = new Product();\n        product.setAuthKey(this.userAuthKey);\n        product.setId(\"JUnit-0001\");\n        product.setName(\"Spring Boot JUnit Test\");\n        product.setPrice(BigDecimal.valueOf(12,55));\n        FirebaseSaveResponse savedResponse = productRepository.save(product);\n        assertNotNull(savedResponse);\n        assertNotNull(savedResponse.getName());\n        assertNotEquals(savedResponse.getName(), \"\");\n        this.firebaseId = savedResponse.getName();\n        product.setFirebaseId(this.firebaseId);\n\n        Product read = productRepository.read(product);\n        assertNotNull(read);\n        assertNotNull(read.getId());\n        assertThat(read.getId(), is(product.getId()));\n\n        product.setName(\"Spring Boot JUnit Test-UPDATED\");\n        productRepository.update(product);\n        Product updatedResponse = productRepository.read(product);\n        assertNotNull(updatedResponse);\n        assertNotNull(updatedResponse.getId());\n        assertThat(read.getId(), is(updatedResponse.getId()));\n        assertThat(updatedResponse.getName(), is(product.getName()));\n\n        productRepository.delete(product);\n        try {\n            Product deletedResponse = productRepository.read(product);\n        } catch (HttpNotFoundException e) {\n            assertThat(e.getMessage(), is(\"FirebaseDocumentId Not Found\"));\n        }\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/github/alperkurtul/firebaserealtimedatabase/repository/test/ProductRepositoryTest.java	(revision 81158cb02cea0722ca88ed16d460ca385cea9a66)
+++ src/test/java/com/github/alperkurtul/firebaserealtimedatabase/repository/test/ProductRepositoryTest.java	(date 1573497328027)
@@ -28,7 +28,7 @@
 @EnableConfigurationProperties(FirebaseDbConfig.class)
 public class ProductRepositoryTest {
 
-    private String userAuthKey = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjI1MDgxMWNkYzYwOWQ5MGY5ODE1MTE5MWIyYmM5YmQwY2ViOWMwMDQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vZmx1dHRlci1wcm9kdWN0cy1hYzIwMyIsImF1ZCI6ImZsdXR0ZXItcHJvZHVjdHMtYWMyMDMiLCJhdXRoX3RpbWUiOjE1NzM0MDIxMDQsInVzZXJfaWQiOiJJVHh5dXY5Q1lKaHA0SUVodnF2eFowYjZEQngyIiwic3ViIjoiSVR4eXV2OUNZSmhwNElFaHZxdnhaMGI2REJ4MiIsImlhdCI6MTU3MzQwMjEwNCwiZXhwIjoxNTczNDA1NzA0LCJlbWFpbCI6InRlc3Q3QHRlc3QuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbInRlc3Q3QHRlc3QuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.RgECG-b8Fb7tuZ2-RntJ-i2VZ2EOSP3G2SmYb3w2y9heV-6EiYmIju_f-eSLoxA-BQ0G5Uiuo8xVBIHTy_7lM40qdGzkOc4g88xRifKQ1uhAkq1g2Np_pYEKYN-AFNxMU0s4zDul0UL-eRQ4OFtZA3x93gvMyz_6gY2TS2hIlMpbg6ymYa52fAgrJicRW-4Q5y-mWaXQ432GlfnAhDGORQlLqHdOAsjEfgjnUz6BTtmcgpRSJUVIe8-DVKYsFLQCxThrmiDm09BL9Z1G-ogA9II8oAtv78SLAl5LLE2aH3gAQQ-fUzShEEEbC8Bnro8mByNwRhjeasVhiyWRfhw0oA";
+    private String userAuthKey = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjI1MDgxMWNkYzYwOWQ5MGY5ODE1MTE5MWIyYmM5YmQwY2ViOWMwMDQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vZmx1dHRlci1wcm9kdWN0cy1hYzIwMyIsImF1ZCI6ImZsdXR0ZXItcHJvZHVjdHMtYWMyMDMiLCJhdXRoX3RpbWUiOjE1NzM0OTczMDQsInVzZXJfaWQiOiJJVHh5dXY5Q1lKaHA0SUVodnF2eFowYjZEQngyIiwic3ViIjoiSVR4eXV2OUNZSmhwNElFaHZxdnhaMGI2REJ4MiIsImlhdCI6MTU3MzQ5NzMwNCwiZXhwIjoxNTczNTAwOTA0LCJlbWFpbCI6InRlc3Q3QHRlc3QuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbInRlc3Q3QHRlc3QuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.ItEuETciOfvEFJQkzyjCZXRA5vN1A0e6VsXZIEPE3Mk4Ks1_XPGBAB_tmjmugh2kd6pEy4Pv7E6l64yQS539QkTW9G_G05NDZfBRvN2XeBW4g_vIoDDz2-eh2Q0jTDKZ-TuYckp27XMMbb2tAvlChwXvGFopy59iir93XZNjdZsd10v3if3kFyFDt76_j00PuVaqYZnCcoYZrIr9VFooSKoscPeRUvb3FggYN6Rh4ck6VChDiJKJB-24VzMbPbhJGJPZTw_LwXBvqSKaRQt6xLS_Qzt-Fh5grJRFC1e14eiUSX_oPyvbZQ2E7QuwWwF8jyqE-c8x416jAx4rG_pukw";
     private String firebaseId = "";
 
     @TestConfiguration
Index: src/main/java/com/github/alperkurtul/firebaserealtimedatabase/annotation/HttpEntityBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/github/alperkurtul/firebaserealtimedatabase/annotation/HttpEntityBuilder.java	(date 1573499309730)
+++ src/main/java/com/github/alperkurtul/firebaserealtimedatabase/annotation/HttpEntityBuilder.java	(date 1573499309730)
@@ -0,0 +1,57 @@
+package com.github.alperkurtul.firebaserealtimedatabase.annotation;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.fabiomaffioletti.firebase.exception.FirebaseRepositoryException;
+import com.github.fabiomaffioletti.firebase.service.FirebaseApplicationService;
+import org.springframework.http.HttpEntity;
+import org.springframework.util.MultiValueMap;
+
+import java.io.IOException;
+
+public class HttpEntityBuilder<T> {
+
+    private final ObjectMapper firebaseObjectMapper;
+
+    private final FirebaseApplicationService firebaseApplicationService;
+
+    private T document;
+
+    private MultiValueMap<String, String> headers;
+
+    private HttpEntityBuilder(ObjectMapper firebaseObjectMapper, FirebaseApplicationService firebaseApplicationService) {
+        try {
+            this.firebaseObjectMapper = firebaseObjectMapper;
+            this.firebaseApplicationService = firebaseApplicationService;
+            headers = this.firebaseApplicationService.headers();
+        } catch (IOException e) {
+            throw new FirebaseRepositoryException(e.getMessage());
+        }
+    }
+
+    public static HttpEntityBuilder create(ObjectMapper firebaseObjectMapper, FirebaseApplicationService firebaseApplicationService) {
+        return new HttpEntityBuilder(firebaseObjectMapper, firebaseApplicationService);
+    }
+
+    public HttpEntityBuilder document(T document) {
+        this.document = document;
+        return this;
+    }
+
+    public HttpEntityBuilder header(String headerName, String headerValue) {
+        this.headers.add(headerName, headerValue);
+        return this;
+    }
+
+    public HttpEntity<String> build() {
+        try {
+            if(document == null) {
+                return new HttpEntity<>(headers);
+            } else {
+                return new HttpEntity<>(firebaseObjectMapper.writeValueAsString(document), headers);
+            }
+        } catch (IOException e) {
+            throw new FirebaseRepositoryException(e.getMessage());
+        }
+    }
+
+}
